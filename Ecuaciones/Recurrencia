<html>
	<script>
		coeficientes_datos=[];
		condiciones = [];
		multiplicador = 0;
		raices= [];
		valor = 0;
		divisores=[];
		raices =[];
		raiz_c =[];
		dividendos=[];
		nuevos_coeficientes=[];
		original_datos=0;
		original_condiciones=[];

		function crear()
		{
			terminos=document.getElementById("Cantidad").value;
			var tabla = document.getElementById("variables_n");
			var tablaCoeficientes = document.getElementById("coeficientes");
			for(i=0;i<terminos;i++)
			{
				var fila=tabla.insertRow(-1);
				for(j=0;j<2;j++)
				{
					var posicion= ""+i+j;
					var celda_individual=fila.insertCell(-1);
					var  CELDA="<input type=\"int\"";
					CELDA=CELDA+"id=\" "+posicion+"\"";
					CELDA=CELDA+"size=\"5\">";
					celda_individual.innerHTML=CELDA;
				}
			}
			terminos=parseInt(terminos)+1;
			for(i=0;i<terminos;i++)
			{
				var fila2=tablaCoeficientes.insertRow(-1);
				for(j=0;j<1;j++)
				{
					var posicion2= ""+i+j;
					var celda_individual2=fila2.insertCell(-1);
					var  CELDA2="<input type=\"int\"";
					CELDA2=CELDA2+"id=\"A"+posicion2+"\"";
					CELDA2=CELDA2+"size=\"5\">";
					celda_individual2.innerHTML=CELDA2;
				}
			}
		} 

		function guardar_coeficientes()
		{
			terminos=document.getElementById("Cantidad").value;
			terminos=parseInt(terminos)+1;
			for(i=0;i<terminos;i++)
			{
				for(j=0;j<1;j++)
				{
					var temporal=document.getElementById("A"+i+j).value;
					coeficientes_datos.push(temporal);
				}
			}
			original_datos=coeficientes_datos.length;
			return coeficientes_datos;
		}

		function guardar_condiciones()
		{
			terminos=document.getElementById("Cantidad").value;
			for(i=0;i<terminos;i++)
			{
				for(j=0;j<2;j++)
				{
					var temporal=document.getElementById(" "+i+j).value;
					condiciones.push(temporal);
				}
			}
			original_condiciones=condiciones;
			return condiciones;
		}

		function derivar_funcion(entrada)
		{
			multiplicador = (entrada.length)-1;
			for(i=0;i<entrada.length;i++)
			{
				entrada[i] = entrada[i]* multiplicador;
				multiplicador = multiplicador-1;
			}
			entrada.pop();
			return entrada;
		}

		function calcular_valor(lista, valor)
		{
			potencia = lista.length;
			potencia=potencia-1;
			resultado=0;
			for(i=0;i< lista.length;i++)
			{
				elevado =Math.pow(valor, potencia)
				resultado = (lista[i]*elevado)+resultado;
				potencia=potencia-1;
			}
			return resultado;
		}

		function calcular_pivote(arreglo)
		{
			numero = 0;
			limbo = calcular_valor(arreglo, numero)
			temporal =0;
			if (limbo>0)
			{
				a=0;
				while(a<5)
				{
					temporal=numero;
					numero = (numero)-1;
					limbo = calcular_valor(arreglo,numero);
					a=a+1;
				}
			return temporal;
			}

			if (limbo<0)
			{
				while(limbo<0)
				{
					temporal=numero;
					numero = numero+1;
					limbo = calcular_valor(arreglo,numero);
				}
			return temporal;
			}
			
			if (limbo==0)
			{
				return limbo;
			}
		}

		function newton_rhapson(x,y)
		{
			numeral =0;
			derivada =derivar_funcion(x);
			original  = y;
			for(var i=0;i<7;i++)
			{
				numeral=numeral-(calcular_valor(original,numeral)/calcular_valor(derivada,numeral));
			}

			return numeral;
		}

		function constructor_funcion()
		{
			crear();
		}

		function guardar_funcion()
		{
			primerArreglo=guardar_coeficientes();
			segundoArreglo=guardar_coeficientes();
			variableX=guardar_coeficientes().length;			
			
			while(variableX>3)
			{
				Raiz = newton_rhapson(primerArreglo.slice(), segundoArreglo.slice());
				retorno = division_sintetica_1(segundoArreglo, Raiz);
				primerArreglo=retorno;
				segundoArreglo=retorno;
				raiz_c.push(Raiz);
				i=i-1;
			}
			if (i==3)
			{
				raiz_c.push(cuadratica1(primerArreglo));
				raiz_c.push(cuadratica2(segundoArreglo));
			}
			
			return raiz_c;
		}

		function lista_divisores(x,y)
		{
			for(i=0;i<x.length;i++)
			{
				for(j=0;j<y.length;j++)
				{
					x[i]=x[i]/y[j];
				}
			}
			return x;
		}

		function division_sintetica(operacion)
		{
			dividendo = operacion.pop();
			operacion.push(dividendo);
			primero = operacion[0];
			if (dividendo<0)
			{
				dividendo=dividendo*-1;
			}
			for(i=1;i<=dividendo;i++)
			{
				if (dividendo%i==0)
				{
					divisores.push(i);
					menosi=i*-1;
					divisores.push(menosi);
				}
			}

			for(i=0;i<=dividendo;i++)
			{
				if(primero%i==0)
				{
					dividendos.push(i);
					menosi=i*-1;
					dividendos.push(menosi);
				}
			}
			divisores = lista_divisores(divisores,dividendos);
			
			for (j=0;j<divisores.length;j++)
			{
				primerValor = operacion[0]*divisores[j];
				valor=0;
				for(i=1;i<operacion.length;i++)
				{
					valor = operacion[i]+primerValor;
					primerValor = valor*divisores[j];
					if (operacion[i]==dividendo && valor==0)
					{
						raices.push(divisores[j]);
					}
				}
			}
		}

		function division_sintetica_1(arreglos, revalor)
		{
			nuevos_coeficientes=[];
			primerValor = arreglos[0]*revalor;
			valor=0;
			nuevos_coeficientes.push(arreglos[0]);
			for(i=1;i<arreglos.length;i++)
			{
				valor = arreglos[i]+primerValor;
				primerValor = valor*revalor;
				nuevos_coeficientes.push(valor);
			}
			if(nuevos_coeficientes.length>3)
			{
				nuevos_coeficientes.pop();
			}
			return nuevos_coeficientes;
		}

		function cuadratica1(matrix)
		{
			a = matrix[0];
			b = matrix[1];
			c = matrix[2];

			x1 = (-b+ Math.sqrt(Math.pow(b, 2)-(4*a*c)))/(2*a);

			return x1;
		}

		function cuadratica2(matrix)
		{
			a = matrix[0];
			b = matrix[1];
			c = matrix[2];

			x2 = (-b- Math.sqrt(Math.pow(b, 2)-(4*a*c)))/(2*a);

			return x2;
		}

		function raices_elevadas(raices)
		{
			cantidad = parseInt(original_condiciones.length/2);

			raices_calculadas=[];

			for(i=0;i<cantidad;i++)
			{
				k=0;
				for(j=0;j<cantidad;j++)
				{
					raices_calculadas.push(Math.pow(raices[i],original_condiciones[k]))
					k=k+2;
				}
			}
			return raices_calculadas;
		}

		function devolver_condiciones()
		{
			resultados_coeficientes=[];
			impar=1;
			cantidad_datos=original_condiciones.length/2;
			for(ii=0;ii<cantidad_datos;ii++)
			{
				resultados_coeficientes.push(original_condiciones[impar]);
				impar=impar+2;
			}
			return resultados_coeficientes;
		}

		function gauss(arreglo_raices, arreglo_condiciones)
		{ 
			cantidad_datos=Math.sqrt(arreglo_raices.length);
			ecuaciones = new Array(cantidad_datos).fill(0);
			divisor=0;
			for(i=0;i<cantidad_datos;i++)
			{
				ecuaciones[i] = new Array(cantidad_datos).fill(0);
			}

			for(i=0;i<cantidad_datos;i++)
			{	
				k=i;
				for(j=0;j<cantidad_datos;j++)
				{
					ecuaciones[i][j] = arreglo_raices[k];
					k=k+cantidad_datos;
				}
			}

			for(i=0;i<cantidad_datos;i++)
			{
				k=i;
				ecuaciones[i].push(arreglo_condiciones[k]);
			}

			for(j=0;j<cantidad_datos;j++)
			{
				if (ecuaciones[0][j]!=1)
				{
					valor=ecuaciones[0][j]
					divisor=valor;
					ecuaciones[0][j]=1;
					for(m=0;m<(cantidad_datos+1);m++)
					{
						if(m!=j)
						{
							ecuaciones[0][m]=ecuaciones[0][m]/divisor;
						}
					}
				}

				for(k=1;k<cantidad_datos;k++)
				{
					if(k<cantidad_datos)
					{
						multiplicador=ecuaciones[k][j]*-1;
					}

					for(h=0;h<(cantidad_datos+1);h++)
					{
						ecuaciones[k][h]=parseFloat((ecuaciones[0][h]*multiplicador)+ecuaciones[k][h]);
					}
				}

				for(l=0;l<cantidad_datos;l++)
				{
					if((l+1)<cantidad_datos)
					{
						temporal=ecuaciones[l+1];
						ecuaciones[l+1]=ecuaciones[l];
						ecuaciones[l]=temporal;
					}
				}

			}
			return ecuaciones;
		}

	function extraer_coeficientes(arreglo_constantes)
	{
		constantes=[]
		cantidad_datos=original_condiciones.length/2;
		for(f=0;f<cantidad_datos;f++)
		{
			constantes.push(arreglo_constantes[f][cantidad_datos]);
		}
		return constantes;
	}

	function real()
	{
		guardar_funcion();
	}

	</script>
	<body>
	<input type="text" placeholder="Ingresar el grado de la ecuacion" id="Cantidad"></input>
	<button onclick="constructor_funcion();">Crear</button>
	<button onclick="real();">Calcular</button>
		<table id="variables_n"></table>
		COEFICIENTES
		<table id="coeficientes"></table>
	</body>
</html>
